package com.example.androiddnsclient;

import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import android.os.StrictMode;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;

public class MainActivity extends AppCompatActivity {
    private static final String DNS_SERVER_ADDRESS = "8.8.8.8";
    private static final int DNS_SERVER_PORT = 53;
    private static final String LOG_TAG = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (android.os.Build.VERSION.SDK_INT > 9) {
            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
            StrictMode.setThreadPolicy(policy);
        }

        EditText domainValue = findViewById(R.id.editTextDomainName);

        Button submit = findViewById(R.id.button);
        submit.setOnClickListener(v -> {
            // Perform action on click
           DNSLookup(domainValue.getText().toString());
        });

    }

    private void DNSLookup(String domain){
        try {
            InetAddress ipAddress = null;
            ipAddress = InetAddress.getByName(DNS_SERVER_ADDRESS);

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            DataOutputStream dos = new DataOutputStream(baos);

            // *** Build a DNS Request Frame ****

            // Identifier: A 16-bit identification field generated by the device that creates the DNS query.
            // It is copied by the server into the response, so it can be used by that device to match that
            // query to the corresponding reply received from a DNS server. This is used in a manner similar
            // to how the Identifier field is used in many of the ICMP message types.
            dos.writeShort(0x1234);

            // Write Query Flags
            dos.writeShort(0x0100);

            // Question Count: Specifies the number of questions in the Question section of the message.
            dos.writeShort(0x0001);

            // Answer Record Count: Specifies the number of resource records in the Answer section of the message.
            dos.writeShort(0x0000);

            // Authority Record Count: Specifies the number of resource records in the Authority section of
            // the message. (“NS” stands for “name server”)
            dos.writeShort(0x0000);

            // Additional Record Count: Specifies the number of resource records in the Additional section of the message.
            dos.writeShort(0x0000);

            String[] domainParts = domain.split("\\.");
            Log.i(MainActivity.LOG_TAG,domain + " has " + domainParts.length + " parts");

            for (int i = 0; i<domainParts.length; i++) {
                Log.i(MainActivity.LOG_TAG,"Writing: " + domainParts[i]);
                byte[] domainBytes = domainParts[i].getBytes("UTF-8");
                dos.writeByte(domainBytes.length);
                dos.write(domainBytes);
            }

            // No more parts
            dos.writeByte(0x00);

            // Type 0x01 = A (Host Request)
            dos.writeShort(0x0001);

            // Class 0x01 = IN
            dos.writeShort(0x0001);

            byte[] dnsFrame = baos.toByteArray();

            Log.i(MainActivity.LOG_TAG,"Sending: " + dnsFrame.length + " bytes");
            for (int i =0; i< dnsFrame.length; i++) {
                Log.i(MainActivity.LOG_TAG,"0x" + String.format("%x", dnsFrame[i]) + " " );
            }

            // *** Send DNS Request Frame ***
            DatagramSocket socket = new DatagramSocket();
            DatagramPacket dnsReqPacket = new DatagramPacket(dnsFrame, dnsFrame.length, ipAddress, DNS_SERVER_PORT);
            socket.send(dnsReqPacket);

            // Await response from DNS server
            byte[] buf = new byte[1024];
            DatagramPacket packet = new DatagramPacket(buf, buf.length);
            socket.receive(packet);

            Log.i(MainActivity.LOG_TAG,"\n\nReceived: " + packet.getLength() + " bytes");

            for (int i = 0; i < packet.getLength(); i++) {
                Log.i(MainActivity.LOG_TAG," 0x" + String.format("%x", buf[i]) + " " );
            }
            Log.i(MainActivity.LOG_TAG,"\n");


            DataInputStream din = new DataInputStream(new ByteArrayInputStream(buf));
            Log.i(MainActivity.LOG_TAG,"Transaction ID: 0x" + String.format("%x", din.readShort()));
            Log.i(MainActivity.LOG_TAG,"Flags: 0x" + String.format("%x", din.readShort()));
            Log.i(MainActivity.LOG_TAG,"Questions: 0x" + String.format("%x", din.readShort()));
            Log.i(MainActivity.LOG_TAG,"Answers RRs: 0x" + String.format("%x", din.readShort()));
            Log.i(MainActivity.LOG_TAG,"Authority RRs: 0x" + String.format("%x", din.readShort()));
            Log.i(MainActivity.LOG_TAG,"Additional RRs: 0x" + String.format("%x", din.readShort()));

            int recLen = 0;
            while ((recLen = din.readByte()) > 0) {
                byte[] record = new byte[recLen];

                for (int i = 0; i < recLen; i++) {
                    record[i] = din.readByte();
                }

                Log.i(MainActivity.LOG_TAG,"Record: " + new String(record, "UTF-8"));
            }

            Log.i(MainActivity.LOG_TAG,"Record Type: 0x" + String.format("%x", din.readShort()));
            Log.i(MainActivity.LOG_TAG,"Class: 0x" + String.format("%x", din.readShort()));

            Log.i(MainActivity.LOG_TAG,"Field: 0x" + String.format("%x", din.readShort()));
            Log.i(MainActivity.LOG_TAG,"Type: 0x" + String.format("%x", din.readShort()));
            Log.i(MainActivity.LOG_TAG,"Class: 0x" + String.format("%x", din.readShort()));
            Log.i(MainActivity.LOG_TAG,"TTL: 0x" + String.format("%x", din.readInt()));

            short addrLen = din.readShort();
            Log.i(MainActivity.LOG_TAG,"Len: 0x" + String.format("%x", addrLen));

            Log.i(MainActivity.LOG_TAG,"Address: ");
            for (int i = 0; i < addrLen; i++ ) {
                Log.i(MainActivity.LOG_TAG,"" + String.format("%d", (din.readByte() & 0xFF)) + ".");
            }
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (SocketException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}